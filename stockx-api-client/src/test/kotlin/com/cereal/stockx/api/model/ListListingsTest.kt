/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.cereal.stockx.api.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.cereal.stockx.api.model.ListListings
import com.cereal.stockx.api.model.AuthenticationDetails
import com.cereal.stockx.api.model.ListingResponseAsk
import com.cereal.stockx.api.model.ListingResponseOrder
import com.cereal.stockx.api.model.ListingResponseProduct
import com.cereal.stockx.api.model.ListingResponseVariant
import com.cereal.stockx.api.model.ListingsResponseBatch
import com.cereal.stockx.api.model.ManifestDataResponse

class ListListingsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ListListings
        //val modelInstance = ListListings()

        // to test the property `listingId` - Unique ID for this listing
        should("test listingId") {
            // uncomment below to test the property
            //modelInstance.listingId shouldBe ("TODO")
        }

        // to test the property `status` - The current status of the listing<br><br>Available values: \"INACTIVE\", \"ACTIVE\", \"DELETED\", \"CANCELED\", \"MATCHED\", \"COMPLETED\"
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `amount` - The amount this product is being listed for
        should("test amount") {
            // uncomment below to test the property
            //modelInstance.amount shouldBe ("TODO")
        }

        // to test the property `currencyCode` - The currency code. If not provided, it will default to USD.  Only valid currencies supported on stockx.com are supported via API.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"
        should("test currencyCode") {
            // uncomment below to test the property
            //modelInstance.currencyCode shouldBe ("TODO")
        }

        // to test the property `inventoryType` - A representation of the type of inventory being listed
        should("test inventoryType") {
            // uncomment below to test the property
            //modelInstance.inventoryType shouldBe ("TODO")
        }

        // to test the property `createdAt` - When the listing was created in UTC. Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `updatedAt` - When this listing was last updated in UTC.  Represented as ISO 8601 format like 2021-11-09T12:44:31.000Z
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `batch` - Information about the batch this listing is part of, if this listing was touched with the batch APIs
        should("test batch") {
            // uncomment below to test the property
            //modelInstance.batch shouldBe ("TODO")
        }

        // to test the property `ask` - An object with ask details
        should("test ask") {
            // uncomment below to test the property
            //modelInstance.ask shouldBe ("TODO")
        }

        // to test the property `authenticationDetails` - An object with authentication details
        should("test authenticationDetails") {
            // uncomment below to test the property
            //modelInstance.authenticationDetails shouldBe ("TODO")
        }

        // to test the property `order` - An object containing the order details
        should("test order") {
            // uncomment below to test the property
            //modelInstance.order shouldBe ("TODO")
        }

        // to test the property `product` - An object containing the product details.
        should("test product") {
            // uncomment below to test the property
            //modelInstance.product shouldBe ("TODO")
        }

        // to test the property `initiatedShipments` - An object containing details about the seller initiated shipments.
        should("test initiatedShipments") {
            // uncomment below to test the property
            //modelInstance.initiatedShipments shouldBe ("TODO")
        }

        // to test the property `variant` - Details about the particular product variant
        should("test variant") {
            // uncomment below to test the property
            //modelInstance.variant shouldBe ("TODO")
        }

    }
}
