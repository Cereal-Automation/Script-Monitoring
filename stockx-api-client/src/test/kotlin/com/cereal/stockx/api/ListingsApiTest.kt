/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.cereal.stockx.api

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.cereal.stockx.api.ListingsApi
import com.cereal.stockx.api.model.ActivateListingInput
import com.cereal.stockx.api.model.CreateListingInput
import com.cereal.stockx.api.model.ListingAsyncOperationResponse
import com.cereal.stockx.api.model.ListingResponse
import com.cereal.stockx.api.model.Listings
import com.cereal.stockx.api.model.OperationApi
import com.cereal.stockx.api.model.OperationsCursorResponse
import com.cereal.stockx.api.model.PublicApiError
import com.cereal.stockx.api.model.UpdateListingInput

class ListingsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ListingsApi
        //val apiInstance = ListingsApi()

        // to test activateListing
        should("test activateListing") {
            // uncomment below to test activateListing
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing
            //val activateListingInput : ActivateListingInput =  // ActivateListingInput | 
            //val result : ListingAsyncOperationResponse = apiInstance.activateListing(listingId, activateListingInput)
            //result shouldBe ("TODO")
        }

        // to test create
        should("test create") {
            // uncomment below to test create
            //val createListingInput : CreateListingInput =  // CreateListingInput | 
            //val result : ListingAsyncOperationResponse = apiInstance.create(createListingInput)
            //result shouldBe ("TODO")
        }

        // to test deactivateListing
        should("test deactivateListing") {
            // uncomment below to test deactivateListing
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing
            //val result : ListingAsyncOperationResponse = apiInstance.deactivateListing(listingId)
            //result shouldBe ("TODO")
        }

        // to test deleteListing
        should("test deleteListing") {
            // uncomment below to test deleteListing
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing
            //val result : ListingAsyncOperationResponse = apiInstance.deleteListing(listingId)
            //result shouldBe ("TODO")
        }

        // to test findById
        should("test findById") {
            // uncomment below to test findById
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing
            //val result : ListingResponse = apiInstance.findById(listingId)
            //result shouldBe ("TODO")
        }

        // to test findOperationById
        should("test findOperationById") {
            // uncomment below to test findOperationById
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing.
            //val operationId : kotlin.String = operationId_example // kotlin.String | Unique ID for this operation.
            //val result : OperationApi = apiInstance.findOperationById(listingId, operationId)
            //result shouldBe ("TODO")
        }

        // to test getAllListings
        should("test getAllListings") {
            // uncomment below to test getAllListings
            //val pageNumber : kotlin.Int = 1 // kotlin.Int | Requested page number. By default the page number starts at 1
            //val pageSize : kotlin.Int = 100 // kotlin.Int | The number of listings to return. By default the page size starts at 1.
            //val productIds : kotlin.String = productIds_example // kotlin.String | Comma separated list of ids. This field must not include array brackets `[]` or quotation marks (\" \" | ' ').
            //val variantIds : kotlin.String = variantIds_example // kotlin.String | Comma separated list of ids. This field must not include array brackets `[]` or quotation marks (\" \" | ' ').
            //val batchIds : kotlin.String = batchIds_example // kotlin.String | Comma separated list of ids. This field must not include array brackets `[]` or quotation marks (\" \" | ' ').
            //val fromDate : kotlin.String = 2022-06-08 // kotlin.String | Start date of the query
            //val toDate : kotlin.String = 2022-06-08 // kotlin.String | End date of the query
            //val listingStatuses : kotlin.String = ACTIVE // kotlin.String | Comma separated list of listing statuses. This field must not include array brackets `[]` or quotation marks (\"\" | '').<br><br>Available values: \"INACTIVE\", \"ACTIVE\", \"DELETED\", \"CANCELED\", \"MATCHED\", \"COMPLETED\"
            //val inventoryTypes : kotlin.String = STANDARD // kotlin.String | Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\"| ''). The inventory types are STANDARD or FLEX.
            //val initiatedShipmentDisplayIds : kotlin.String = initiatedShipmentDisplayIds_example // kotlin.String | The shipment's unique display id associated with the listing. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro.
            //val result : Listings = apiInstance.getAllListings(pageNumber, pageSize, productIds, variantIds, batchIds, fromDate, toDate, listingStatuses, inventoryTypes, initiatedShipmentDisplayIds)
            //result shouldBe ("TODO")
        }

        // to test getListingOperations
        should("test getListingOperations") {
            // uncomment below to test getListingOperations
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Requested page number. Starts at 1.
            //val cursor : kotlin.String = cursor_example // kotlin.String | The cursor to use as a starting point
            //val result : OperationsCursorResponse = apiInstance.getListingOperations(listingId, pageSize, cursor)
            //result shouldBe ("TODO")
        }

        // to test update
        should("test update") {
            // uncomment below to test update
            //val listingId : kotlin.String = listingId_example // kotlin.String | Unique ID for this listing
            //val updateListingInput : UpdateListingInput =  // UpdateListingInput | 
            //val result : ListingAsyncOperationResponse = apiInstance.update(listingId, updateListingInput)
            //result shouldBe ("TODO")
        }

    }
}
