/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.cereal.stockx.api

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.cereal.stockx.api.CatalogApi
import com.cereal.stockx.api.model.CatalogIngestionInput
import com.cereal.stockx.api.model.CurrencyCode
import com.cereal.stockx.api.model.GetIngestionItemsReponse
import com.cereal.stockx.api.model.IngestionControllerResponse
import com.cereal.stockx.api.model.Product
import com.cereal.stockx.api.model.ProductVariant
import com.cereal.stockx.api.model.ProductVariantDetails
import com.cereal.stockx.api.model.PublicApiError
import com.cereal.stockx.api.model.Search
import com.cereal.stockx.api.model.VariantMarketData

class CatalogApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CatalogApi
        //val apiInstance = CatalogApi()

        // to test getProduct
        should("test getProduct") {
            // uncomment below to test getProduct
            //val productId : kotlin.String = productId_example // kotlin.String | Unique identifier for a product
            //val result : Product = apiInstance.getProduct(productId)
            //result shouldBe ("TODO")
        }

        // to test getProductMarketData
        should("test getProductMarketData") {
            // uncomment below to test getProductMarketData
            //val productId : kotlin.String = productId_example // kotlin.String | Unique identifier for a product
            //val currencyCode : CurrencyCode =  // CurrencyCode | The currency code this product is being listed in.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"
            //val result : kotlin.collections.List<VariantMarketData> = apiInstance.getProductMarketData(productId, currencyCode)
            //result shouldBe ("TODO")
        }

        // to test getVariant
        should("test getVariant") {
            // uncomment below to test getVariant
            //val productId : kotlin.String = productId_example // kotlin.String | Unique identifier for a product
            //val variantId : kotlin.String = variantId_example // kotlin.String | Unique identifier for a products variant
            //val result : ProductVariantDetails = apiInstance.getVariant(productId, variantId)
            //result shouldBe ("TODO")
        }

        // to test getVariantMarketData
        should("test getVariantMarketData") {
            // uncomment below to test getVariantMarketData
            //val productId : kotlin.String = productId_example // kotlin.String | Unique identifier for a product
            //val variantId : kotlin.String = variantId_example // kotlin.String | Unique identifier for a products variant
            //val currencyCode : CurrencyCode =  // CurrencyCode | The currency code this product is being listed in.<br><br>Available values: \"AUD\", \"CAD\", \"CHF\", \"EUR\", \"GBP\", \"HKD\", \"JPY\", \"KRW\", \"MXN\", \"NZD\", \"SGD\", \"USD\"
            //val country : kotlin.String = country_example // kotlin.String | ISO Alpha-2 code representing the country you need the market data for. If not provided, will default to your country.
            //val result : VariantMarketData = apiInstance.getVariantMarketData(productId, variantId, currencyCode, country)
            //result shouldBe ("TODO")
        }

        // to test getVariants
        should("test getVariants") {
            // uncomment below to test getVariants
            //val productId : kotlin.String = productId_example // kotlin.String | Unique identifier for a product
            //val result : kotlin.collections.List<ProductVariant> = apiInstance.getVariants(productId)
            //result shouldBe ("TODO")
        }

        // to test ingestion
        should("test ingestion") {
            // uncomment below to test ingestion
            //val catalogIngestionInput : CatalogIngestionInput =  // CatalogIngestionInput | 
            //val result : IngestionControllerResponse = apiInstance.ingestion(catalogIngestionInput)
            //result shouldBe ("TODO")
        }

        // to test ingestionItems
        should("test ingestionItems") {
            // uncomment below to test ingestionItems
            //val ingestionId : kotlin.String = ingestionId_example // kotlin.String | Unique ID used to return the status of an ingestion job.
            //val status : kotlin.String = status_example // kotlin.String | The status of the ingestion job. In review, Completed, Rejected.
            //val result : GetIngestionItemsReponse = apiInstance.ingestionItems(ingestionId, status)
            //result shouldBe ("TODO")
        }

        // to test search
        should("test search") {
            // uncomment below to test search
            //val query : kotlin.String = nike // kotlin.String | Specifies a keyword search as a String.
            //val pageNumber : kotlin.Int = 1 // kotlin.Int | Requested page number. By default, the page number starts at 1.
            //val pageSize : kotlin.Int = 10 // kotlin.Int | The number of products to return. By default, the page size starts at 1.
            //val result : Search = apiInstance.search(query, pageNumber, pageSize)
            //result shouldBe ("TODO")
        }

    }
}
