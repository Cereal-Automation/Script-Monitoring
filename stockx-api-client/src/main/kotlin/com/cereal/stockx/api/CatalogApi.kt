/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.cereal.stockx.api

import com.cereal.stockx.api.model.CatalogIngestionInput
import com.cereal.stockx.api.model.CurrencyCode
import com.cereal.stockx.api.model.GetIngestionItemsReponse
import com.cereal.stockx.api.model.IngestionControllerResponse
import com.cereal.stockx.api.model.Product
import com.cereal.stockx.api.model.ProductVariant
import com.cereal.stockx.api.model.ProductVariantDetails
import com.cereal.stockx.api.model.PublicApiError
import com.cereal.stockx.api.model.Search
import com.cereal.stockx.api.model.VariantMarketData

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class CatalogApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * GET /catalog/products/{productId}
        * Get single product
        * Get product details API allows you to fetch details for a single product
         * @param productId Unique identifier for a product 
         * @return Product
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getProduct(productId: kotlin.String): HttpResponse<Product> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/products/{productId}".replace("{" + "productId" + "}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /catalog/products/{productId}/market-data
        * Get market data for a product
        * Get Market Data API allows you to obtain basic market data - the highest Bid and lowest Ask amount for all variants of given product. You may notice discrepancies in the values for sellFasterAmount and earnMoreAmount between this and the ‘Get market data for a variant&#x60; API. This is because this API does not take into account any live asks you currently have for each individual variant, while the &#39;Get market data for a variant’ API does.&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Based on your region, the response object may vary.&lt;/li&gt;&lt;/ul&gt;
         * @param productId Unique identifier for a product 
         * @param currencyCode The currency code this product is being listed in.&lt;br&gt;&lt;br&gt;Available values: \&quot;AUD\&quot;, \&quot;CAD\&quot;, \&quot;CHF\&quot;, \&quot;EUR\&quot;, \&quot;GBP\&quot;, \&quot;HKD\&quot;, \&quot;JPY\&quot;, \&quot;KRW\&quot;, \&quot;MXN\&quot;, \&quot;NZD\&quot;, \&quot;SGD\&quot;, \&quot;USD\&quot; (optional)
         * @return kotlin.collections.List<VariantMarketData>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getProductMarketData(productId: kotlin.String, currencyCode: CurrencyCode?): HttpResponse<kotlin.collections.List<VariantMarketData>> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            currencyCode?.apply { localVariableQuery["currencyCode"] = listOf("$currencyCode") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/products/{productId}/market-data".replace("{" + "productId" + "}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /catalog/products/{productId}/variants/{variantId}
        * Get single product variant
        * Get variant details API allows you to fetch the details of a single variant for a given product. If the product id doesn&#39;t contain the specified variant, a validation error will be returned.
         * @param productId Unique identifier for a product 
         * @param variantId Unique identifier for a products variant 
         * @return ProductVariantDetails
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVariant(productId: kotlin.String, variantId: kotlin.String): HttpResponse<ProductVariantDetails> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/products/{productId}/variants/{variantId}".replace("{" + "productId" + "}", "$productId").replace("{" + "variantId" + "}", "$variantId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /catalog/products/{productId}/variants/{variantId}/market-data
        * Get market data for a variant
        * Get Market Data API allows you to obtain basic market data - the highest Bid and lowest Ask amount for a given variant. If the product id doesn&#39;t contain the specified variant, a validation error will be returned.&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt; &lt;ul&gt;&lt;li&gt;We have deprecated the country param as the market data will now be based on your market.&lt;/li&gt; &lt;li&gt;Based on your region, the response object may vary.&lt;/li&gt;&lt;/ul&gt;
         * @param productId Unique identifier for a product 
         * @param variantId Unique identifier for a products variant 
         * @param currencyCode The currency code this product is being listed in.&lt;br&gt;&lt;br&gt;Available values: \&quot;AUD\&quot;, \&quot;CAD\&quot;, \&quot;CHF\&quot;, \&quot;EUR\&quot;, \&quot;GBP\&quot;, \&quot;HKD\&quot;, \&quot;JPY\&quot;, \&quot;KRW\&quot;, \&quot;MXN\&quot;, \&quot;NZD\&quot;, \&quot;SGD\&quot;, \&quot;USD\&quot; (optional)
         * @param country ISO Alpha-2 code representing the country you need the market data for. If not provided, will default to your country. (optional)
         * @return VariantMarketData
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVariantMarketData(productId: kotlin.String, variantId: kotlin.String, currencyCode: CurrencyCode?, country: kotlin.String?): HttpResponse<VariantMarketData> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            currencyCode?.apply { localVariableQuery["currencyCode"] = listOf("$currencyCode") }
            country?.apply { localVariableQuery["country"] = listOf("$country") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/products/{productId}/variants/{variantId}/market-data".replace("{" + "productId" + "}", "$productId").replace("{" + "variantId" + "}", "$variantId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /catalog/products/{productId}/variants
        * Get all product variants
        * Get product variants API allows you to get all the different variants of a given product.
         * @param productId Unique identifier for a product 
         * @return kotlin.collections.List<ProductVariant>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getVariants(productId: kotlin.String): HttpResponse<kotlin.collections.List<ProductVariant>> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/products/{productId}/variants".replace("{" + "productId" + "}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /catalog/ingestion
        * Post - Create a Catalog Ingestion Job (Beta)
        * &lt;b&gt;Seamlessly Integrate Catalog Data into Our Platform.&lt;/b&gt;&lt;br&gt;To create an ingestion job, you need to provide a set of catalog attributes. This API is asynchronous and will return an IngestionID that will require polling.
         * @param catalogIngestionInput  
         * @return IngestionControllerResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun ingestion(catalogIngestionInput: CatalogIngestionInput): HttpResponse<IngestionControllerResponse> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = catalogIngestionInput

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/catalog/ingestion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /catalog/ingestion/{ingestionId}
        * Get - Catalog Ingestion Status (Beta)
        * &lt;b&gt;Monitor Your Data Integration Status.&lt;/b&gt;&lt;br&gt;Once you create an ingestion job successfully, you need to poll the get catalog ingestion API to track the progress, whether the entire job or individual updates.
         * @param ingestionId Unique ID used to return the status of an ingestion job. 
         * @param status The status of the ingestion job. In review, Completed, Rejected. (optional)
         * @return GetIngestionItemsReponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun ingestionItems(ingestionId: kotlin.String, status: kotlin.String?): HttpResponse<GetIngestionItemsReponse> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            status?.apply { localVariableQuery["status"] = listOf("$status") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/ingestion/{ingestionId}".replace("{" + "ingestionId" + "}", "$ingestionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /catalog/search
        * Search catalog
        * Search catalog API allows you to search the StockX catalog via freeform text. The output is a paginated list of products that match the search term provided in the API call.
         * @param query Specifies a keyword search as a String. 
         * @param pageNumber Requested page number. By default, the page number starts at 1. (optional)
         * @param pageSize The number of products to return. By default, the page size starts at 1. (optional)
         * @return Search
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun search(query: kotlin.String, pageNumber: kotlin.Int?, pageSize: kotlin.Int?): HttpResponse<Search> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            query?.apply { localVariableQuery["query"] = listOf("$query") }
            pageNumber?.apply { localVariableQuery["pageNumber"] = listOf("$pageNumber") }
            pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/catalog/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
