/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.cereal.stockx.api

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.cereal.stockx.api.model.DetailedOrder
import com.cereal.stockx.api.model.Orders
import com.cereal.stockx.api.model.PublicApiError

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrderApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.stockx.com/v2")
        }
    }

    /**
     * GET /selling/orders/history
     * Get historical orders
     * Get all historical orders. Multiple filters are available.
     * @param fromDate The start date of when the orders were created. Format is YYYY-MM-DD. (optional)
     * @param toDate The end date of when the orders were created. Format is YYYY-MM-DD. (optional)
     * @param pageNumber The requested page number. By default the page number is 1 (optional)
     * @param pageSize The number of orders to be returned. By default the number is 10 (optional)
     * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;AUTHFAILED\&quot;, \&quot;DIDNOTSHIP\&quot;, \&quot;CANCELED\&quot;, \&quot;COMPLETED\&quot;, \&quot;RETURNED\&quot; (optional)
     * @param productId Unique StockX product ID (optional)
     * @param variantId Unique StockX variant ID (optional)
     * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
     * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
     * @return Orders
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getHistoricalOrders(fromDate: kotlin.String? = null, toDate: kotlin.String? = null, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, orderStatus: kotlin.String? = null, productId: kotlin.String? = null, variantId: kotlin.String? = null, inventoryTypes: kotlin.String? = null, initiatedShipmentDisplayIds: kotlin.String? = null) : Orders {
        val localVarResponse = getHistoricalOrdersWithHttpInfo(fromDate = fromDate, toDate = toDate, pageNumber = pageNumber, pageSize = pageSize, orderStatus = orderStatus, productId = productId, variantId = variantId, inventoryTypes = inventoryTypes, initiatedShipmentDisplayIds = initiatedShipmentDisplayIds)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Orders
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /selling/orders/history
     * Get historical orders
     * Get all historical orders. Multiple filters are available.
     * @param fromDate The start date of when the orders were created. Format is YYYY-MM-DD. (optional)
     * @param toDate The end date of when the orders were created. Format is YYYY-MM-DD. (optional)
     * @param pageNumber The requested page number. By default the page number is 1 (optional)
     * @param pageSize The number of orders to be returned. By default the number is 10 (optional)
     * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;AUTHFAILED\&quot;, \&quot;DIDNOTSHIP\&quot;, \&quot;CANCELED\&quot;, \&quot;COMPLETED\&quot;, \&quot;RETURNED\&quot; (optional)
     * @param productId Unique StockX product ID (optional)
     * @param variantId Unique StockX variant ID (optional)
     * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
     * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
     * @return ApiResponse<Orders?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getHistoricalOrdersWithHttpInfo(fromDate: kotlin.String?, toDate: kotlin.String?, pageNumber: kotlin.Int?, pageSize: kotlin.Int?, orderStatus: kotlin.String?, productId: kotlin.String?, variantId: kotlin.String?, inventoryTypes: kotlin.String?, initiatedShipmentDisplayIds: kotlin.String?) : ApiResponse<Orders?> {
        val localVariableConfig = getHistoricalOrdersRequestConfig(fromDate = fromDate, toDate = toDate, pageNumber = pageNumber, pageSize = pageSize, orderStatus = orderStatus, productId = productId, variantId = variantId, inventoryTypes = inventoryTypes, initiatedShipmentDisplayIds = initiatedShipmentDisplayIds)

        return request<Unit, Orders>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getHistoricalOrders
     *
     * @param fromDate The start date of when the orders were created. Format is YYYY-MM-DD. (optional)
     * @param toDate The end date of when the orders were created. Format is YYYY-MM-DD. (optional)
     * @param pageNumber The requested page number. By default the page number is 1 (optional)
     * @param pageSize The number of orders to be returned. By default the number is 10 (optional)
     * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;AUTHFAILED\&quot;, \&quot;DIDNOTSHIP\&quot;, \&quot;CANCELED\&quot;, \&quot;COMPLETED\&quot;, \&quot;RETURNED\&quot; (optional)
     * @param productId Unique StockX product ID (optional)
     * @param variantId Unique StockX variant ID (optional)
     * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
     * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
     * @return RequestConfig
     */
    fun getHistoricalOrdersRequestConfig(fromDate: kotlin.String?, toDate: kotlin.String?, pageNumber: kotlin.Int?, pageSize: kotlin.Int?, orderStatus: kotlin.String?, productId: kotlin.String?, variantId: kotlin.String?, inventoryTypes: kotlin.String?, initiatedShipmentDisplayIds: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fromDate != null) {
                    put("fromDate", listOf(fromDate.toString()))
                }
                if (toDate != null) {
                    put("toDate", listOf(toDate.toString()))
                }
                if (pageNumber != null) {
                    put("pageNumber", listOf(pageNumber.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
                if (orderStatus != null) {
                    put("orderStatus", listOf(orderStatus.toString()))
                }
                if (productId != null) {
                    put("productId", listOf(productId.toString()))
                }
                if (variantId != null) {
                    put("variantId", listOf(variantId.toString()))
                }
                if (inventoryTypes != null) {
                    put("inventoryTypes", listOf(inventoryTypes.toString()))
                }
                if (initiatedShipmentDisplayIds != null) {
                    put("initiatedShipmentDisplayIds", listOf(initiatedShipmentDisplayIds.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/selling/orders/history",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /selling/orders/{orderNumber}
     * Get single order
     * Get order details API allows you to fetch details for a single order by order number. This includes shipping and payout information.
     * @param orderNumber The unique order number. Standard example: 323314425-323214184. Flex example: 02-L0QT6MRVSG
     * @return DetailedOrder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrder(orderNumber: kotlin.String) : DetailedOrder {
        val localVarResponse = getOrderWithHttpInfo(orderNumber = orderNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DetailedOrder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /selling/orders/{orderNumber}
     * Get single order
     * Get order details API allows you to fetch details for a single order by order number. This includes shipping and payout information.
     * @param orderNumber The unique order number. Standard example: 323314425-323214184. Flex example: 02-L0QT6MRVSG
     * @return ApiResponse<DetailedOrder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrderWithHttpInfo(orderNumber: kotlin.String) : ApiResponse<DetailedOrder?> {
        val localVariableConfig = getOrderRequestConfig(orderNumber = orderNumber)

        return request<Unit, DetailedOrder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrder
     *
     * @param orderNumber The unique order number. Standard example: 323314425-323214184. Flex example: 02-L0QT6MRVSG
     * @return RequestConfig
     */
    fun getOrderRequestConfig(orderNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/selling/orders/{orderNumber}".replace("{"+"orderNumber"+"}", encodeURIComponent(orderNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /selling/orders/{orderNumber}/shipping-document/{shippingId}
     * Get shipping document
     * Get an existing shipping document.
     * @param jwtAuthorization 
     * @param authorization 
     * @param orderNumber The number of order to fetch
     * @param shippingId The shipping ID of order to fetch
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrderShipment(jwtAuthorization: kotlin.String, authorization: kotlin.String, orderNumber: kotlin.String, shippingId: kotlin.String) : kotlin.Any {
        val localVarResponse = getOrderShipmentWithHttpInfo(jwtAuthorization = jwtAuthorization, authorization = authorization, orderNumber = orderNumber, shippingId = shippingId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /selling/orders/{orderNumber}/shipping-document/{shippingId}
     * Get shipping document
     * Get an existing shipping document.
     * @param jwtAuthorization 
     * @param authorization 
     * @param orderNumber The number of order to fetch
     * @param shippingId The shipping ID of order to fetch
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrderShipmentWithHttpInfo(jwtAuthorization: kotlin.String, authorization: kotlin.String, orderNumber: kotlin.String, shippingId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getOrderShipmentRequestConfig(jwtAuthorization = jwtAuthorization, authorization = authorization, orderNumber = orderNumber, shippingId = shippingId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrderShipment
     *
     * @param jwtAuthorization 
     * @param authorization 
     * @param orderNumber The number of order to fetch
     * @param shippingId The shipping ID of order to fetch
     * @return RequestConfig
     */
    fun getOrderShipmentRequestConfig(jwtAuthorization: kotlin.String, authorization: kotlin.String, orderNumber: kotlin.String, shippingId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        jwtAuthorization.apply { localVariableHeaders["jwt-authorization"] = this.toString() }
        authorization.apply { localVariableHeaders["authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/selling/orders/{orderNumber}/shipping-document/{shippingId}".replace("{"+"orderNumber"+"}", encodeURIComponent(orderNumber.toString())).replace("{"+"shippingId"+"}", encodeURIComponent(shippingId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /selling/orders/active
     * Get active orders
     * Get all active orders API allows you to view all their active orders in the StockX marketplace. An order is considered active from the time it was created to the time the product was received and authenticated by StockX and the seller is paid out.
     * @param pageNumber The number of page (optional)
     * @param pageSize Requested page number. Starts at 1 (optional)
     * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;CREATED\&quot;, \&quot;CCAUTHORIZATIONFAILED\&quot;, \&quot;SHIPPED\&quot;, \&quot;RECEIVED\&quot;, \&quot;AUTHENTICATING\&quot;, \&quot;AUTHENTICATED\&quot;, \&quot;PAYOUTPENDING\&quot;, \&quot;PAYOUTCOMPLETED\&quot;, \&quot;SYSTEMFULFILLED\&quot;, \&quot;PAYOUTFAILED\&quot;, \&quot;SUSPENDED\&quot; (optional)
     * @param productId Unique identifier for a product (optional)
     * @param variantId Unique identifier for a products variant (optional)
     * @param sortOrder The field by which the results are sorted. Defaults to \&quot;CREATEDAT\&quot; and can also accept \&quot;SHIPBYDATE\&quot;. (optional)
     * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
     * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
     * @return Orders
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrders(pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null, orderStatus: kotlin.String? = null, productId: kotlin.String? = null, variantId: kotlin.String? = null, sortOrder: kotlin.String? = null, inventoryTypes: kotlin.String? = null, initiatedShipmentDisplayIds: kotlin.String? = null) : Orders {
        val localVarResponse = getOrdersWithHttpInfo(pageNumber = pageNumber, pageSize = pageSize, orderStatus = orderStatus, productId = productId, variantId = variantId, sortOrder = sortOrder, inventoryTypes = inventoryTypes, initiatedShipmentDisplayIds = initiatedShipmentDisplayIds)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Orders
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /selling/orders/active
     * Get active orders
     * Get all active orders API allows you to view all their active orders in the StockX marketplace. An order is considered active from the time it was created to the time the product was received and authenticated by StockX and the seller is paid out.
     * @param pageNumber The number of page (optional)
     * @param pageSize Requested page number. Starts at 1 (optional)
     * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;CREATED\&quot;, \&quot;CCAUTHORIZATIONFAILED\&quot;, \&quot;SHIPPED\&quot;, \&quot;RECEIVED\&quot;, \&quot;AUTHENTICATING\&quot;, \&quot;AUTHENTICATED\&quot;, \&quot;PAYOUTPENDING\&quot;, \&quot;PAYOUTCOMPLETED\&quot;, \&quot;SYSTEMFULFILLED\&quot;, \&quot;PAYOUTFAILED\&quot;, \&quot;SUSPENDED\&quot; (optional)
     * @param productId Unique identifier for a product (optional)
     * @param variantId Unique identifier for a products variant (optional)
     * @param sortOrder The field by which the results are sorted. Defaults to \&quot;CREATEDAT\&quot; and can also accept \&quot;SHIPBYDATE\&quot;. (optional)
     * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
     * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
     * @return ApiResponse<Orders?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrdersWithHttpInfo(pageNumber: kotlin.Int?, pageSize: kotlin.Int?, orderStatus: kotlin.String?, productId: kotlin.String?, variantId: kotlin.String?, sortOrder: kotlin.String?, inventoryTypes: kotlin.String?, initiatedShipmentDisplayIds: kotlin.String?) : ApiResponse<Orders?> {
        val localVariableConfig = getOrdersRequestConfig(pageNumber = pageNumber, pageSize = pageSize, orderStatus = orderStatus, productId = productId, variantId = variantId, sortOrder = sortOrder, inventoryTypes = inventoryTypes, initiatedShipmentDisplayIds = initiatedShipmentDisplayIds)

        return request<Unit, Orders>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrders
     *
     * @param pageNumber The number of page (optional)
     * @param pageSize Requested page number. Starts at 1 (optional)
     * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;CREATED\&quot;, \&quot;CCAUTHORIZATIONFAILED\&quot;, \&quot;SHIPPED\&quot;, \&quot;RECEIVED\&quot;, \&quot;AUTHENTICATING\&quot;, \&quot;AUTHENTICATED\&quot;, \&quot;PAYOUTPENDING\&quot;, \&quot;PAYOUTCOMPLETED\&quot;, \&quot;SYSTEMFULFILLED\&quot;, \&quot;PAYOUTFAILED\&quot;, \&quot;SUSPENDED\&quot; (optional)
     * @param productId Unique identifier for a product (optional)
     * @param variantId Unique identifier for a products variant (optional)
     * @param sortOrder The field by which the results are sorted. Defaults to \&quot;CREATEDAT\&quot; and can also accept \&quot;SHIPBYDATE\&quot;. (optional)
     * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
     * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
     * @return RequestConfig
     */
    fun getOrdersRequestConfig(pageNumber: kotlin.Int?, pageSize: kotlin.Int?, orderStatus: kotlin.String?, productId: kotlin.String?, variantId: kotlin.String?, sortOrder: kotlin.String?, inventoryTypes: kotlin.String?, initiatedShipmentDisplayIds: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageNumber != null) {
                    put("pageNumber", listOf(pageNumber.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
                if (orderStatus != null) {
                    put("orderStatus", listOf(orderStatus.toString()))
                }
                if (productId != null) {
                    put("productId", listOf(productId.toString()))
                }
                if (variantId != null) {
                    put("variantId", listOf(variantId.toString()))
                }
                if (sortOrder != null) {
                    put("sortOrder", listOf(sortOrder.toString()))
                }
                if (inventoryTypes != null) {
                    put("inventoryTypes", listOf(inventoryTypes.toString()))
                }
                if (initiatedShipmentDisplayIds != null) {
                    put("initiatedShipmentDisplayIds", listOf(initiatedShipmentDisplayIds.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/selling/orders/active",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
