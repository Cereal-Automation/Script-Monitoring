/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.cereal.stockx.api

import com.cereal.stockx.api.model.DetailedOrder
import com.cereal.stockx.api.model.Orders
import com.cereal.stockx.api.model.PublicApiError

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class OrderApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * GET /selling/orders/history
        * Get historical orders
        * Get all historical orders. Multiple filters are available.
         * @param fromDate The start date of when the orders were created. Format is YYYY-MM-DD. (optional)
         * @param toDate The end date of when the orders were created. Format is YYYY-MM-DD. (optional)
         * @param pageNumber The requested page number. By default the page number is 1 (optional)
         * @param pageSize The number of orders to be returned. By default the number is 10 (optional)
         * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;AUTHFAILED\&quot;, \&quot;DIDNOTSHIP\&quot;, \&quot;CANCELED\&quot;, \&quot;COMPLETED\&quot;, \&quot;RETURNED\&quot; (optional)
         * @param productId Unique StockX product ID (optional)
         * @param variantId Unique StockX variant ID (optional)
         * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
         * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
         * @return Orders
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getHistoricalOrders(fromDate: kotlin.String?, toDate: kotlin.String?, pageNumber: kotlin.Int?, pageSize: kotlin.Int?, orderStatus: kotlin.String?, productId: kotlin.String?, variantId: kotlin.String?, inventoryTypes: kotlin.String?, initiatedShipmentDisplayIds: kotlin.String?): HttpResponse<Orders> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            fromDate?.apply { localVariableQuery["fromDate"] = listOf("$fromDate") }
            toDate?.apply { localVariableQuery["toDate"] = listOf("$toDate") }
            pageNumber?.apply { localVariableQuery["pageNumber"] = listOf("$pageNumber") }
            pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }
            orderStatus?.apply { localVariableQuery["orderStatus"] = listOf("$orderStatus") }
            productId?.apply { localVariableQuery["productId"] = listOf("$productId") }
            variantId?.apply { localVariableQuery["variantId"] = listOf("$variantId") }
            inventoryTypes?.apply { localVariableQuery["inventoryTypes"] = listOf("$inventoryTypes") }
            initiatedShipmentDisplayIds?.apply { localVariableQuery["initiatedShipmentDisplayIds"] = listOf("$initiatedShipmentDisplayIds") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/selling/orders/history",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /selling/orders/{orderNumber}
        * Get single order
        * Get order details API allows you to fetch details for a single order by order number. This includes shipping and payout information.
         * @param orderNumber The unique order number. Standard example: 323314425-323214184. Flex example: 02-L0QT6MRVSG 
         * @return DetailedOrder
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getOrder(orderNumber: kotlin.String): HttpResponse<DetailedOrder> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/selling/orders/{orderNumber}".replace("{" + "orderNumber" + "}", "$orderNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /selling/orders/{orderNumber}/shipping-document/{shippingId}
        * Get shipping document
        * Get an existing shipping document.
         * @param jwtAuthorization  
         * @param authorization  
         * @param orderNumber The number of order to fetch 
         * @param shippingId The shipping ID of order to fetch 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getOrderShipment(jwtAuthorization: kotlin.String, authorization: kotlin.String, orderNumber: kotlin.String, shippingId: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            jwtAuthorization?.apply { localVariableHeaders["jwt-authorization"] = this.toString() }
            authorization?.apply { localVariableHeaders["authorization"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/selling/orders/{orderNumber}/shipping-document/{shippingId}".replace("{" + "orderNumber" + "}", "$orderNumber").replace("{" + "shippingId" + "}", "$shippingId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /selling/orders/active
        * Get active orders
        * Get all active orders API allows you to view all their active orders in the StockX marketplace. An order is considered active from the time it was created to the time the product was received and authenticated by StockX and the seller is paid out.
         * @param pageNumber The number of page (optional)
         * @param pageSize Requested page number. Starts at 1 (optional)
         * @param orderStatus To filter your Orders by a given order status&lt;br&gt;&lt;br&gt;Available values: \&quot;CREATED\&quot;, \&quot;CCAUTHORIZATIONFAILED\&quot;, \&quot;SHIPPED\&quot;, \&quot;RECEIVED\&quot;, \&quot;AUTHENTICATING\&quot;, \&quot;AUTHENTICATED\&quot;, \&quot;PAYOUTPENDING\&quot;, \&quot;PAYOUTCOMPLETED\&quot;, \&quot;SYSTEMFULFILLED\&quot;, \&quot;PAYOUTFAILED\&quot;, \&quot;SUSPENDED\&quot; (optional)
         * @param productId Unique identifier for a product (optional)
         * @param variantId Unique identifier for a products variant (optional)
         * @param sortOrder The field by which the results are sorted. Defaults to \&quot;CREATEDAT\&quot; and can also accept \&quot;SHIPBYDATE\&quot;. (optional)
         * @param inventoryTypes Comma-separated list of inventory type(s). This field must not include array brackets [] or quotation marks (\&quot;| &#39;&#39;). The inventory types are STANDARD or FLEX. (optional)
         * @param initiatedShipmentDisplayIds The shipment&#39;s unique display id associated with the order. Note: This is the same ID generated when a Flex inbound list is created in StockX Pro. (optional)
         * @return Orders
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getOrders(pageNumber: kotlin.Int?, pageSize: kotlin.Int?, orderStatus: kotlin.String?, productId: kotlin.String?, variantId: kotlin.String?, sortOrder: kotlin.String?, inventoryTypes: kotlin.String?, initiatedShipmentDisplayIds: kotlin.String?): HttpResponse<Orders> {

            val localVariableAuthNames = listOf<String>("api_key", "jwt")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            pageNumber?.apply { localVariableQuery["pageNumber"] = listOf("$pageNumber") }
            pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }
            orderStatus?.apply { localVariableQuery["orderStatus"] = listOf("$orderStatus") }
            productId?.apply { localVariableQuery["productId"] = listOf("$productId") }
            variantId?.apply { localVariableQuery["variantId"] = listOf("$variantId") }
            sortOrder?.apply { localVariableQuery["sortOrder"] = listOf("$sortOrder") }
            inventoryTypes?.apply { localVariableQuery["inventoryTypes"] = listOf("$inventoryTypes") }
            initiatedShipmentDisplayIds?.apply { localVariableQuery["initiatedShipmentDisplayIds"] = listOf("$initiatedShipmentDisplayIds") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/selling/orders/active",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
