name: Release Build

on:
  push:
    tags:
      - '*'

jobs:
  determine-modules:
    name: Determine modules to build
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
      all-modules: ${{ steps.set-modules.outputs.all-modules }}
    steps:
      - name: Parse tag and determine modules
        id: set-modules
        run: |
          # Extract tag name (remove refs/tags/ prefix)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Tag: $TAG_NAME"
          
          # Check if tag contains a slash (module_name/version_name format)
          if [[ "$TAG_NAME" == *"/"* ]]; then
            # Extract module name (everything before the last slash)
            MODULE_NAME=$(echo "$TAG_NAME" | sed 's|/.*||')
            echo "Module-specific release for: $MODULE_NAME"
            echo "modules=$MODULE_NAME" >> $GITHUB_OUTPUT
            echo "all-modules=false" >> $GITHUB_OUTPUT
          else
            # Version-only tag, build all script modules
            echo "Full release - building all script modules"
            echo "modules=script-nike,script-snkrs,script-bdga-store,script-tgtg,script-sample,script-zalando" >> $GITHUB_OUTPUT
            echo "all-modules=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build ${{ matrix.module }}
    runs-on: ubuntu-latest
    needs: determine-modules
    if: needs.determine-modules.outputs.modules != ''
    strategy:
      matrix:
        module: ${{ fromJson(format('["{0}"]', join(split(needs.determine-modules.outputs.modules, ','), '","'))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Build script JAR
        run: ./gradlew ${{ matrix.module }}:scriptJar
        
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.module }}-${{ github.ref_name }}-release
          path: ${{ matrix.module }}/build/obfuscated/release.jar
          
      - name: Create GitHub Release
        if: needs.determine-modules.outputs.all-modules == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.module }}/build/obfuscated/release.jar
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-modules, build]
    if: needs.determine-modules.outputs.all-modules == 'true'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*/release.jar
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
